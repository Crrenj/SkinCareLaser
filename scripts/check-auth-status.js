#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'
import path from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

// Charger les variables d'environnement
dotenv.config({ path: path.join(__dirname, '..', '.env.local') })

const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m'
}

const log = {
  success: (msg) => console.log(`${colors.green}‚úì${colors.reset} ${msg}`),
  error: (msg) => console.log(`${colors.red}‚úó${colors.reset} ${msg}`),
  warning: (msg) => console.log(`${colors.yellow}‚ö†${colors.reset} ${msg}`),
  info: (msg) => console.log(`${colors.blue}‚Ñπ${colors.reset} ${msg}`)
}

async function checkAuthStatus() {
  console.log('\nüîê Diagnostic de l\'authentification JWT...\n')

  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
  const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  const supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY || process.env.SUPABASE_SERVICE_ROLE_KEY
  
  // 1. V√©rifier les cl√©s
  log.info('1. V√©rification des cl√©s Supabase...')
  
  if (!supabaseUrl || !supabaseAnonKey) {
    log.error('Cl√©s Supabase manquantes dans .env.local')
    return
  }
  
  log.success('Cl√©s Supabase pr√©sentes')
  
  // 2. Test des connexions
  log.info('\n2. Test de connexion Supabase...')
  
  try {
    const supabase = createClient(supabaseUrl, supabaseServiceKey || supabaseAnonKey)
    
    const { data, error } = await supabase
      .from('tag_types')
      .select('id, name')
      .limit(1)
    
    if (error) {
      log.error(`Erreur Supabase : ${error.message}`)
      if (error.message.includes('JWT')) {
        log.warning('Probl√®me JWT d√©tect√© avec Supabase')
      }
    } else {
      log.success('Connexion Supabase OK')
    }
  } catch (error) {
    log.error(`Erreur connexion : ${error.message}`)
  }
  
  // 3. Test API locale
  log.info('\n3. Test API locale...')
  
  try {
    const response = await fetch('http://localhost:3001/api/admin/tag-types')
    
    if (response.ok) {
      log.success('API locale fonctionne')
    } else {
      log.error(`API erreur : ${response.status}`)
      if (response.status === 401) {
        log.warning('Erreur 401 - Authentification requise')
      }
    }
  } catch (error) {
    log.warning('Serveur local non accessible')
  }
  
  // Solutions
  console.log('\nüí° Solutions pour l\'erreur JWT :')
  
  log.info('üåê Pour l\'interface web :')
  log.info('  ‚Ä¢ Rafra√Æchir la page (Ctrl+F5)')
  log.info('  ‚Ä¢ Vider le cache navigateur')
  log.info('  ‚Ä¢ Se d√©connecter/reconnecter')
  log.info('  ‚Ä¢ Supprimer les cookies')
  
  log.info('\nüîë Pour l\'authentification :')
  log.info('  ‚Ä¢ Aller sur http://localhost:3001/login')
  log.info('  ‚Ä¢ V√©rifier que vous √™tes admin')
  log.info('  ‚Ä¢ Red√©marrer le serveur : npm run dev')
  
  log.info('\nüîß Pour Supabase :')
  log.info('  ‚Ä¢ V√©rifier les cl√©s dans .env.local')
  log.info('  ‚Ä¢ R√©g√©n√©rer les cl√©s si n√©cessaire')
  log.info('  ‚Ä¢ V√©rifier les permissions RLS')
  
  console.log('\nüìã Diagnostic :')
  log.success('‚úÖ Scripts Node.js fonctionnent')
  log.warning('‚ö†Ô∏è  Erreur JWT probablement c√¥t√© navigateur')
  log.info('üéØ Solution recommand√©e : Rafra√Æchir la page')
}

checkAuthStatus().catch(console.error) 